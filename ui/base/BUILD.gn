# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ui.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}

declare_args() {
  ui_base_build_ime = true
}

component("base") {
  output_name = "ui_base"
  sources = [
    "android/system_ui_resource_manager.h",
    "android/ui_base_jni_registrar.cc",
    "android/ui_base_jni_registrar.h",
    "android/view_android.cc",
    "android/view_android.h",
    "android/window_android.cc",
    "android/window_android.h",
    "android/window_android_compositor.h",
    "android/window_android_observer.h",
    "cursor/cursor.cc",
    "cursor/cursor.h",
    "cursor/cursor_android.cc",
    "cursor/cursor_loader.h",
    "cursor/cursor_util.cc",
    "cursor/cursor_util.h",
    "cursor/cursor_win.cc",
    "hit_test.h",
    "l10n/formatter.cc",
    "l10n/formatter.h",
    "l10n/l10n_font_util.cc",
    "l10n/l10n_font_util.h",
    "l10n/l10n_util.cc",
    "l10n/l10n_util.h",
    "l10n/l10n_util_android.cc",
    "l10n/l10n_util_android.h",
    "l10n/l10n_util_collator.h",
    "l10n/l10n_util_mac.h",
    "l10n/l10n_util_mac.mm",
    "l10n/l10n_util_plurals.cc",
    "l10n/l10n_util_plurals.h",
    "l10n/l10n_util_posix.cc",
    "l10n/l10n_util_win.cc",
    "l10n/l10n_util_win.h",
    "l10n/time_format.cc",
    "l10n/time_format.h",
    "layout.cc",
    "layout.h",
    "layout_mac.mm",
    "resource/data_pack.cc",
    "resource/data_pack.h",
    "resource/resource_bundle.cc",
    "resource/resource_bundle.h",
    "resource/resource_bundle_android.cc",
    "resource/resource_bundle_auralinux.cc",
    "resource/resource_bundle_ios.mm",
    "resource/resource_bundle_mac.mm",
    "resource/resource_bundle_win.cc",
    "resource/resource_bundle_win.h",
    "resource/resource_data_dll_win.cc",
    "resource/resource_data_dll_win.h",
    "resource/resource_handle.h",
    "text/bytes_formatting.cc",
    "text/bytes_formatting.h",
    "touch/touch_device.h",
    "touch/touch_enabled.cc",
    "touch/touch_enabled.h",
    "ui_base_export.h",
    "ui_base_paths.cc",
    "ui_base_paths.h",
    "ui_base_switches.cc",
    "ui_base_switches.h",
    "ui_base_switches_util.cc",
    "ui_base_switches_util.h",
    "ui_base_types.cc",
    "ui_base_types.h",
    "view_prop.cc",
    "view_prop.h",
    "win/accessibility_ids_win.h",
    "win/accessibility_misc_utils.cc",
    "win/accessibility_misc_utils.h",
    "win/atl_module.h",
    "win/dpi_setup.cc",
    "win/dpi_setup.h",
    "win/foreground_helper.cc",
    "win/foreground_helper.h",
    "win/hidden_window.cc",
    "win/hidden_window.h",
    "win/hwnd_subclass.cc",
    "win/hwnd_subclass.h",
    "win/internal_constants.cc",
    "win/internal_constants.h",
    "win/lock_state.cc",
    "win/lock_state.h",
    "win/open_file_name_win.cc",
    "win/open_file_name_win.h",
    "win/message_box_win.cc",
    "win/message_box_win.h",
    "win/mouse_wheel_util.cc",
    "win/mouse_wheel_util.h",
    "win/scoped_ole_initializer.cc",
    "win/scoped_ole_initializer.h",
    "win/shell.cc",
    "win/shell.h",
    "win/touch_input.cc",
    "win/touch_input.h",
    "win/window_event_target.cc",
    "win/window_event_target.h",
  ]

  if (is_win) {
    sources += [ "touch/touch_device_win.cc" ]
  } else if (is_android) {
    sources += [ "touch/touch_device_android.cc" ]
  } else if (use_aura && use_x11) {
    sources += [ "touch/touch_device_aurax11.cc" ]
  } else {
    # Empty implementation for all other cases.
    sources += [ "touch/touch_device.cc" ]
  }

  defines = [ "UI_BASE_IMPLEMENTATION" ]

  public_deps = [
    "//base",
    "//skia",
    "//ui/events/platform",
    "//ui/events:events_base",
    "//ui/gfx",
    "//ui/gfx/geometry",
  ]
  deps = [
    "//base/third_party/dynamic_annotations",
    "//base:base_static",
    "//base:i18n",
    "//net",
    "//third_party/icu",
    "//ui/resources",
    "//ui/strings",
    "//url",
  ]

  if (use_aura) {
    deps += [ "//ui/events" ]
  } else {
    sources -= [
      "cursor/cursor.cc",
      "cursor/cursor.h",
    ]
  }
  if (use_x11) {
    sources += [
      "x/x11_foreign_window_manager.cc",
      "x/x11_foreign_window_manager.h",
      "x/x11_menu_list.cc",
      "x/x11_menu_list.h",
      "x/x11_util.cc",
      "x/x11_util.h",
      "x/x11_util_internal.h",
    ]
    deps += [ "//ui/gfx/x" ]
  }

  if (!use_aura || !is_linux) {
    sources -= [ "resource/resource_bundle_auralinux.cc" ]
  }

  if (is_linux) {
    configs += [
      "//build/config/linux:fontconfig",
      "//build/config/linux:glib",
    ]
  }

  libs = []
  if (is_win) {
    sources += [
      "cursor/cursor_loader_win.cc",
      "cursor/cursor_loader_win.h",
    ]
    cflags = [
      "/wd4267",  # TODO(jschuh): C4267: http://crbug.com/167187 size_t -> int.
      "/wd4324",  # Structure was padded due to __declspec(align()), which is
                  # uninteresting.
    ]
    ldflags = [
      "/DELAYLOAD:d2d1.dll",
      "/DELAYLOAD:d3d10_1.dll",
      "/DELAYLOAD:dwmapi.dll",
    ]
    libs += [
      "d2d1.lib",
      "d3d10_1.lib",
      "dwmapi.lib",
      "imm32.lib",
      "d2d1.lib",
      "dwmapi.lib",
      "oleacc.lib",
    ]
  } else {
    sources -= [
      "view_prop.cc",
      "view_prop.h",
    ]
  }

  if (is_mac) {
    deps += [ "//third_party/mozilla" ]

    libs += [
      "Accelerate.framework",
      "AudioUnit.framework",
      "CoreVideo.framework",
    ]
  }

  if (use_x11) {
    #'all_dependent_settings': {
    #'ldflags': [
    #'-L<(PRODUCT_DIR)',
    #],
    #},
    configs += [ "//build/config/linux:x11" ]
  }

  if (use_x11) {
    sources += [
      "cursor/cursor_loader_x11.cc",
      "cursor/cursor_loader_x11.h",
      "cursor/cursor_x11.cc",
    ]
  }

  if (is_android) {
    sources -= [
      "l10n/l10n_font_util.cc",
      "ui_base_types.cc",
    ]

    deps += [ ":ui_base_jni_headers" ]

    libs += [ "jnigraphics" ]
  }

  if (is_android && is_android_webview_build) {
    deps += [
      #TODO(GYP): port this component to GN.
      #"//ui/android:ui_java",
    ]
  }

  if (is_android && !use_aura) {
    sources -= [ "cursor/cursor_android.cc" ]
  }
}

if (is_android) {
  generate_jni("ui_base_jni_headers") {
    sources = [
      "../android/java/src/org/chromium/ui/base/DeviceFormFactor.java",
      "../android/java/src/org/chromium/ui/base/LocalizationUtils.java",
      "../android/java/src/org/chromium/ui/base/ResourceBundle.java",
      "../android/java/src/org/chromium/ui/base/SelectFileDialog.java",
      "../android/java/src/org/chromium/ui/base/TouchDevice.java",
      "../android/java/src/org/chromium/ui/base/ViewAndroid.java",
      "../android/java/src/org/chromium/ui/base/WindowAndroid.java",
    ]
    jni_package = "base"
  }
}

if (false) {
  # TODO(GYP): Make this work on Android and reenable it.
  if (!is_android) {
    # TODO(tfarina): Rename this target to ui_base_unittests.
    # In order to do this we will need to keep this target, add a dummy
    # ui_base_unittests target that just points to ui_unittests, change
    # buildbot code to reference the new 'ui_base_unittests' target.
    # After buildbot is updated, we can make the changes in Chromium and
    # remove 'ui_unittests' target. crbug.com/331829
    # GYP version: ui/base/ui_base_tests.gyp:ui_unittests
    test("ui_unittests") {
      sources = [
        "l10n/l10n_util_mac_unittest.mm",
        "l10n/l10n_util_unittest.cc",
        "l10n/l10n_util_win_unittest.cc",
        "l10n/time_format_unittest.cc",
        "layout_unittest.cc",
        "models/tree_node_iterator_unittest.cc",
        "resource/data_pack_literal.cc",
        "resource/data_pack_unittest.cc",
        "resource/resource_bundle_unittest.cc",
        "test/run_all_unittests.cc",
      ]

      sources += [
        "accelerators/accelerator_manager_unittest.cc",
        "accelerators/menu_label_accelerator_util_linux_unittest.cc",
        "models/list_model_unittest.cc",
        "models/list_selection_model_unittest.cc",
        "models/tree_node_model_unittest.cc",
        "test/data/resource.h",
        "text/bytes_formatting_unittest.cc",
        "view_prop_unittest.cc",
      ]

      deps = [
        "//base",
        "//base/allocator",
        "//base/test:test_support",
        "//net",
        "//skia",
        "//testing/gmock",
        "//testing/gtest",
        "//third_party/icu",
        "//ui/base",
        "//ui/events:events_base",
        "//ui/events:test_support",
        "//ui/gfx:test_support",
        "//ui/resources",
        "//ui/resources:ui_test_pak",
        "//ui/strings",
        "//url",
      ]

      if (is_win) {
        sources += [
          "win/hwnd_subclass_unittest.cc",
          "win/open_file_name_win_unittest.cc",
        ]

        ldflags = [
          "/DELAYLOAD:d2d1.dll",
          "/DELAYLOAD:d3d10_1.dll",
        ]
        libs = [
          "d2d1.lib",
          "d3d10_1.lib",
          "imm32.lib",
          "oleacc.lib",
        ]

        # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
        cflags = [ "/wd4267" ]
      }

      if (is_android) {
        deps += [
          #"testing/android/native_test.gyp:native_test_native_code"  TODO(GYP)
        ]
      }

      if (use_pango) {
        configs += [ "//build/config/linux:pangocairo" ]
      }

      if (use_x11) {
        sources += [ "cursor/cursor_loader_x11_unittest.cc" ]

        configs += [ "//build/config/linux:x11" ]

        deps += [
          "//ui/events/platform/x11",
          "//ui/gfx/x",
        ]

        datadeps = [
          "//tools/xdisplaycheck",
        ]
      }

      if (!is_win || !use_aura) {
        sources -= [ "view_prop_unittest.cc" ]
      }

      if (is_mac) {
        deps += [
          "//third_party/mozilla",
          #'ui_unittests_bundle',  TODO(GYP)
        ]
      }

      if (is_chromeos) {
        sources += [ "../chromeos/touch_exploration_controller_unittest.cc" ]
        deps += [
          "//chromeos",
          "//ui/aura:test_support",
          "//ui/events:gesture_detection",
          "//ui/chromeos:ui_chromeos",
        ]
      }
    }
  }
}
# TODO(GYP) Mac (ui_unittest_bundle) and Android (ui_unittests_apk).
